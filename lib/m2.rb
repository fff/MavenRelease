require 'yaml'
require 'Nokogiri'

module M2
  class XML
    def initialize(path)
      @path = path
      @xml = Nokogiri.XML File.open(path, 'r') if File.exist?(path)
    end

    attr_reader :path

    def is_exist?
      not @xml.nil?
    end

    def save!
      raise Exception.new('no xml content to save') if @xml.nil?
      begin
        File.open(@path, 'w').write @xml.to_xml
      rescue Exception => ex
        puts "Failed to update #{}, caused by #{ex.message}"
      end
    end
  end

  class Settings < XML
    def initialize(path = File.join(Dir.home, '.m2', 'settings.xml'))
      super
    end

    def has_servers?
      not @xml.xpath('//xmlns:servers').empty?
    end

    def has_svn_server?(svn_address)
      has_servers? and not @xml.xpath("//xmlns:servers//xmlns:id[text()='#{svn_address}']").empty?
    end

    def set_svn_server!(user_name, password)
      server_template=<<-SERVER
<server>
    <id>#{SVN_ADDRESS}</id>
    <username>#{user_name}</username>
    <password>Generated by release-helper, #{Time.now}, #{password}</password>
</server>
      SERVER

      if has_servers?
        @xml.xpath('//xmlns:settings/xmlns:servers').first.add_child server_template
      else
        @xml.xpath('//xmlns:settings').first.add_child <<-SERVERS
<servers>
   #{server_template}
</servers>
        SERVERS
      end
    end
  end

  class SettingSecurity < XML
    def initialize(path = File.join(Dir.home, '.m2', 'settings-security.xml'))
      super
    end

    def has_root?
      @xml and not @xml.xpath('//settingsSecurity').empty?
    end

    def has_master_password?
      has_root? and not @xml.xpath('//settingsSecurity/master').empty?
    end

    def set_master_password!(masked_password)
      master_template =<<-MASTER
<master>#{masked_password}</master>
      MASTER

      if has_root?
        @xml.xpath('//settingsSecurity').first.add_child master_template
      else
        @xml = Nokogiri::XML <<-SECURITY
<settingsSecurity>
  #{master_template}
</settingsSecurity>
        SECURITY
      end
      self
    end
  end

end

